// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bomFieldNames          = builder.RawFieldNames(&Bom{})
	bomRows                = strings.Join(bomFieldNames, ",")
	bomRowsExpectAutoSet   = strings.Join(stringx.Remove(bomFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bomRowsWithPlaceHolder = strings.Join(stringx.Remove(bomFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	bomModel interface {
		Insert(ctx context.Context, data *Bom) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Bom, error)
		FindOneByParentMaterialCodeChildMaterialCode(ctx context.Context, parentMaterialCode string, childMaterialCode string) (*Bom, error)
		Update(ctx context.Context, data *Bom) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultBomModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Bom struct {
		Id                 uint64    `db:"id"`
		ParentMaterialCode string    `db:"parent_material_code"` // 父物料编码, 关联 materials.code
		ChildMaterialCode  string    `db:"child_material_code"`  // 子物料编码, 关联 materials.code
		Quantity           float64   `db:"quantity"`             // 子物料用量，即组成1个父物料需要多少子物料
		Status             int64     `db:"status"`               // 生效状态 (1:生效, 0:失效)
		CreatedAt          time.Time `db:"created_at"`           // 创建时间 (微秒精度)
		UpdatedAt          time.Time `db:"updated_at"`           // 更新时间 (微秒精度)
	}
)

func newBomModel(conn sqlx.SqlConn) *defaultBomModel {
	return &defaultBomModel{
		conn:  conn,
		table: "`bom`",
	}
}

func (m *defaultBomModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBomModel) FindOne(ctx context.Context, id uint64) (*Bom, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bomRows, m.table)
	var resp Bom
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBomModel) FindOneByParentMaterialCodeChildMaterialCode(ctx context.Context, parentMaterialCode string, childMaterialCode string) (*Bom, error) {
	var resp Bom
	query := fmt.Sprintf("select %s from %s where `parent_material_code` = ? and `child_material_code` = ? limit 1", bomRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, parentMaterialCode, childMaterialCode)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBomModel) Insert(ctx context.Context, data *Bom) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, bomRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ParentMaterialCode, data.ChildMaterialCode, data.Quantity, data.Status)
	return ret, err
}

func (m *defaultBomModel) Update(ctx context.Context, newData *Bom) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bomRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ParentMaterialCode, newData.ChildMaterialCode, newData.Quantity, newData.Status, newData.Id)
	return err
}

func (m *defaultBomModel) tableName() string {
	return m.table
}
