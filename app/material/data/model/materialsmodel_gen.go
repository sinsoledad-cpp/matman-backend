// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	materialsFieldNames          = builder.RawFieldNames(&Materials{})
	materialsRows                = strings.Join(materialsFieldNames, ",")
	materialsRowsExpectAutoSet   = strings.Join(stringx.Remove(materialsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	materialsRowsWithPlaceHolder = strings.Join(stringx.Remove(materialsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	materialsModel interface {
		Insert(ctx context.Context, data *Materials) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Materials, error)
		FindOneByCode(ctx context.Context, code string) (*Materials, error)
		Update(ctx context.Context, data *Materials) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultMaterialsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Materials struct {
		Id            uint64         `db:"id"`
		Code          string         `db:"code"`           // 物料编码，业务唯一键
		Name          string         `db:"name"`           // 物料名称
		MaterialType  sql.NullString `db:"material_type"`  // 物料类型 (例如: 成品, 半成品, 原料)
		Spec          sql.NullString `db:"spec"`           // 规格型号
		Unit          sql.NullString `db:"unit"`           // 单位 (例如: 个, kg, 米)
		Price         int64          `db:"price"`          // 单价, 存储为分，避免浮点数精度问题
		StockQuantity int64          `db:"stock_quantity"` // 库存数量
		SupplierName  sql.NullString `db:"supplier_name"`  // 供应商, 简化处理
		CreatedAt     time.Time      `db:"created_at"`     // 创建时间 (微秒精度)
		UpdatedAt     time.Time      `db:"updated_at"`     // 更新时间 (微秒精度)
	}
)

func newMaterialsModel(conn sqlx.SqlConn) *defaultMaterialsModel {
	return &defaultMaterialsModel{
		conn:  conn,
		table: "`materials`",
	}
}

func (m *defaultMaterialsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMaterialsModel) FindOne(ctx context.Context, id uint64) (*Materials, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", materialsRows, m.table)
	var resp Materials
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMaterialsModel) FindOneByCode(ctx context.Context, code string) (*Materials, error) {
	var resp Materials
	query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", materialsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, code)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMaterialsModel) Insert(ctx context.Context, data *Materials) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, materialsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Code, data.Name, data.MaterialType, data.Spec, data.Unit, data.Price, data.StockQuantity, data.SupplierName)
	return ret, err
}

func (m *defaultMaterialsModel) Update(ctx context.Context, newData *Materials) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, materialsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Code, newData.Name, newData.MaterialType, newData.Spec, newData.Unit, newData.Price, newData.StockQuantity, newData.SupplierName, newData.Id)
	return err
}

func (m *defaultMaterialsModel) tableName() string {
	return m.table
}
